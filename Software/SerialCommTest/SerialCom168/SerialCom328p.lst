
SerialCom328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008e  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000037e  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000014f  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a0  00000000  00000000  000007cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000142  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c6  00000000  00000000  00000c32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8e:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delayLong>:




void delayLong()
{
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
	{ 
		asm("nop");  
  9a:	00 00       	nop
		delayvar++;
  9c:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	8d 3d       	cpi	r24, 0xDD	; 221
  a2:	92 07       	cpc	r25, r18
  a4:	d1 f7       	brne	.-12     	; 0x9a <delayLong+0x4>
	{ 
		asm("nop");  
		delayvar++;
	} 
}
  a6:	08 95       	ret

000000a8 <serialCheckRxComplete>:


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
  a8:	80 91 c0 00 	lds	r24, 0x00C0
}
  ac:	80 78       	andi	r24, 0x80	; 128
  ae:	08 95       	ret

000000b0 <serialCheckTxReady>:

unsigned char serialCheckTxReady(void)
{
	return( UCSR0A & _BV(UDRE0) ) ;		// nonzero if transmit register is ready to receive new data.
  b0:	80 91 c0 00 	lds	r24, 0x00C0
}
  b4:	80 72       	andi	r24, 0x20	; 32
  b6:	08 95       	ret

000000b8 <serialRead>:
}


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
  b8:	80 91 c0 00 	lds	r24, 0x00C0
	return( UCSR0A & _BV(UDRE0) ) ;		// nonzero if transmit register is ready to receive new data.
}

unsigned char serialRead(void)
{
	while (serialCheckRxComplete() == 0)		// While data is NOT available to read
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <serialRead>
	{;;} 
	return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6
}
  c4:	08 95       	ret

000000c6 <serialWrite>:

void serialWrite(unsigned char DataOut)
{
  c6:	98 2f       	mov	r25, r24
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
}

unsigned char serialCheckTxReady(void)
{
	return( UCSR0A & _BV(UDRE0) ) ;		// nonzero if transmit register is ready to receive new data.
  c8:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
}

void serialWrite(unsigned char DataOut)
{
	while (serialCheckTxReady() == 0)		// while NOT ready to transmit 
  cc:	85 ff       	sbrs	r24, 5
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <serialWrite+0x2>
	{;;} 
	UDR0 = DataOut;
  d0:	90 93 c6 00 	sts	0x00C6, r25
}
  d4:	08 95       	ret

000000d6 <establishContact>:

void serialWrite(unsigned char DataOut)
{
	while (serialCheckTxReady() == 0)		// while NOT ready to transmit 
	{;;} 
	UDR0 = DataOut;
  d6:	21 e4       	ldi	r18, 0x41	; 65
  d8:	3e c0       	rjmp	.+124    	; 0x156 <establishContact+0x80>
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
}

unsigned char serialCheckTxReady(void)
{
	return( UCSR0A & _BV(UDRE0) ) ;		// nonzero if transmit register is ready to receive new data.
  da:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
}

void serialWrite(unsigned char DataOut)
{
	while (serialCheckTxReady() == 0)		// while NOT ready to transmit 
  de:	85 ff       	sbrs	r24, 5
  e0:	fc cf       	rjmp	.-8      	; 0xda <establishContact+0x4>
	{;;} 
	UDR0 = DataOut;
  e2:	20 93 c6 00 	sts	0x00C6, r18
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
	{ 
		asm("nop");  
  ea:	00 00       	nop
		delayvar++;
  ec:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
  ee:	3f ef       	ldi	r19, 0xFF	; 255
  f0:	8d 3d       	cpi	r24, 0xDD	; 221
  f2:	93 07       	cpc	r25, r19
  f4:	d1 f7       	brne	.-12     	; 0xea <establishContact+0x14>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
	{ 
		asm("nop");  
  fa:	00 00       	nop
		delayvar++;
  fc:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
  fe:	3f ef       	ldi	r19, 0xFF	; 255
 100:	8d 3d       	cpi	r24, 0xDD	; 221
 102:	93 07       	cpc	r25, r19
 104:	d1 f7       	brne	.-12     	; 0xfa <establishContact+0x24>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
	{ 
		asm("nop");  
 10a:	00 00       	nop
		delayvar++;
 10c:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
 10e:	3f ef       	ldi	r19, 0xFF	; 255
 110:	8d 3d       	cpi	r24, 0xDD	; 221
 112:	93 07       	cpc	r25, r19
 114:	d1 f7       	brne	.-12     	; 0x10a <establishContact+0x34>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	90 e0       	ldi	r25, 0x00	; 0
	{ 
		asm("nop");  
 11a:	00 00       	nop
		delayvar++;
 11c:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
 11e:	3f ef       	ldi	r19, 0xFF	; 255
 120:	8d 3d       	cpi	r24, 0xDD	; 221
 122:	93 07       	cpc	r25, r19
 124:	d1 f7       	brne	.-12     	; 0x11a <establishContact+0x44>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
	{ 
		asm("nop");  
 12a:	00 00       	nop
		delayvar++;
 12c:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
 12e:	3f ef       	ldi	r19, 0xFF	; 255
 130:	8d 3d       	cpi	r24, 0xDD	; 221
 132:	93 07       	cpc	r25, r19
 134:	d1 f7       	brne	.-12     	; 0x12a <establishContact+0x54>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
	{ 
		asm("nop");  
 13a:	00 00       	nop
		delayvar++;
 13c:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
 13e:	3f ef       	ldi	r19, 0xFF	; 255
 140:	8d 3d       	cpi	r24, 0xDD	; 221
 142:	93 07       	cpc	r25, r19
 144:	d1 f7       	brne	.-12     	; 0x13a <establishContact+0x64>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
	{ 
		asm("nop");  
 14a:	00 00       	nop
		delayvar++;
 14c:	01 96       	adiw	r24, 0x01	; 1

void delayLong()
{
	unsigned int delayvar;
	delayvar = 0; 
	while (delayvar <=  65500U)		
 14e:	3f ef       	ldi	r19, 0xFF	; 255
 150:	8d 3d       	cpi	r24, 0xDD	; 221
 152:	93 07       	cpc	r25, r19
 154:	d1 f7       	brne	.-12     	; 0x14a <establishContact+0x74>
}


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
 156:	80 91 c0 00 	lds	r24, 0x00C0
}



void establishContact() {
	while (serialCheckRxComplete() == 0) { 
 15a:	87 ff       	sbrs	r24, 7
 15c:	be cf       	rjmp	.-132    	; 0xda <establishContact+0x4>
		delayLong();
		delayLong();
		delayLong();
		delayLong();
	}
}
 15e:	08 95       	ret

00000160 <main>:

	//Interrupts are not needed in this program. You can optionally disable interrupts.	
	//asm("cli");		// DISABLE global interrupts.


	DDRD = _BV(1);
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	8a b9       	out	0x0a, r24	; 10
	DDRB = _BV(0) | _BV(1) | _BV(3) | _BV(5);
 164:	8b e2       	ldi	r24, 0x2B	; 43
 166:	84 b9       	out	0x04, r24	; 4

	//Serial Initialization

	/*Set baud rate */ 
	UBRR0H = (unsigned char)(MYUBRR>>8); 
 168:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) MYUBRR; 
 16c:	87 e6       	ldi	r24, 0x67	; 103
 16e:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter   */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 
 172:	88 e1       	ldi	r24, 0x18	; 24
 174:	80 93 c1 00 	sts	0x00C1, r24
	/* Frame format: 8data, No parity, 1stop bit */ 
	UCSR0C = (3<<UCSZ00);  
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	80 93 c2 00 	sts	0x00C2, r24
	int secondSensor = 0;   // second analog sensor
	int thirdSensor = 0;    // digital sensor
	int inByte = 0;         // incoming serial byte


	PORTB |= _BV(1); // Turn on LED @ PB1
 17e:	29 9a       	sbi	0x05, 1	; 5


	establishContact();  // send a byte to establish contact until Processing responds 
 180:	0e 94 6b 00 	call	0xd6	; 0xd6 <establishContact>

	PORTB &= 253U; // Turn off LED
 184:	29 98       	cbi	0x05, 1	; 5
}


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
 186:	80 91 c0 00 	lds	r24, 0x00C0

	for (;;)  // main loop										
	{


		if (serialCheckRxComplete()) {
 18a:	87 ff       	sbrs	r24, 7
 18c:	fc cf       	rjmp	.-8      	; 0x186 <main+0x26>
			PORTB |= _BV(1); // Turn on LED @ PB1
 18e:	29 9a       	sbi	0x05, 1	; 5
}


unsigned char serialCheckRxComplete(void)
{
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
 190:	80 91 c0 00 	lds	r24, 0x00C0
	return( UCSR0A & _BV(UDRE0) ) ;		// nonzero if transmit register is ready to receive new data.
}

unsigned char serialRead(void)
{
	while (serialCheckRxComplete() == 0)		// While data is NOT available to read
 194:	87 ff       	sbrs	r24, 7
 196:	fc cf       	rjmp	.-8      	; 0x190 <main+0x30>
	{;;} 
	return UDR0;
 198:	80 91 c6 00 	lds	r24, 0x00C6
 19c:	e0 e0       	ldi	r30, 0x00	; 0
 19e:	f1 e0       	ldi	r31, 0x01	; 1
			//serialWrite(secondSensor & 255U);
			//serialWrite(thirdSensor & 255U);
			char* alexx = "\nAlexx is patient and wonderful!\n";
			unsigned int i = 0;
			for (i = 0; i < strlen(alexx); ++i) {
				serialWrite(alexx[i]);
 1a0:	90 81       	ld	r25, Z
	return( UCSR0A & _BV(RXC0)) ;		// nonzero if serial data is available to read.
}

unsigned char serialCheckTxReady(void)
{
	return( UCSR0A & _BV(UDRE0) ) ;		// nonzero if transmit register is ready to receive new data.
 1a2:	80 91 c0 00 	lds	r24, 0x00C0
	return UDR0;
}

void serialWrite(unsigned char DataOut)
{
	while (serialCheckTxReady() == 0)		// while NOT ready to transmit 
 1a6:	85 ff       	sbrs	r24, 5
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <main+0x42>
	{;;} 
	UDR0 = DataOut;
 1aa:	90 93 c6 00 	sts	0x00C6, r25
 1ae:	31 96       	adiw	r30, 0x01	; 1
			//serialWrite(firstSensor & 255U);
			//serialWrite(secondSensor & 255U);
			//serialWrite(thirdSensor & 255U);
			char* alexx = "\nAlexx is patient and wonderful!\n";
			unsigned int i = 0;
			for (i = 0; i < strlen(alexx); ++i) {
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	e1 32       	cpi	r30, 0x21	; 33
 1b4:	f8 07       	cpc	r31, r24
 1b6:	a1 f7       	brne	.-24     	; 0x1a0 <main+0x40>
 1b8:	e5 cf       	rjmp	.-54     	; 0x184 <main+0x24>

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
